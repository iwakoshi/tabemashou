// Define Java Library conventions for this organization.
// Projects need to use the organization's Java conventions and publish using Maven Publish

plugins {
    id 'java'
    id 'java-library'
    id 'io.quarkus'
    id 'maven-publish'
    id 'checkstyle'

    // NOTE: external plugin version is specified in implementation dependency artifact of the project's build file
    id 'com.github.spotbugs'
}

// Projects have the 'com.example' group by convention
group = 'dev.iwakoshi'

// Projects should use Maven Central for external dependencies
// This could be the organization's private repository
repositories {
    mavenCentral()
}

// Use the Checkstyle rules provided by the convention plugin
// Do not allow any warnings
checkstyle {
    config = resources.text.fromString(dev.iwakoshi.CheckstyleUtil.getCheckstyleConfig("/checkstyle.xml"))
    maxWarnings = 0
}

// Enable deprecation messages when compiling Java code
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-Xlint:deprecation"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

dependencies {
    implementation enforcedPlatform('io.quarkus.platform:quarkus-bom:2.9.1.Final')
    implementation 'io.quarkus:quarkus-arc'

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'com.tngtech.archunit:archunit-junit5:0.23.1'
}

publishing {
    publications {
        library(MavenPublication) {
            from components.java
        }
    }
}

// The project requires libraries to have a README containing sections configured below
def readmeCheck = tasks.register('readmeCheck', dev.iwakoshi.ReadmeVerificationTask) {
    // Expect the README in the project directory
    readme = layout.projectDirectory.file("README.md")
    // README must contain a Service API header
    readmePatterns = ['^# ']
}

tasks.named('check') { dependsOn(readmeCheck) }
